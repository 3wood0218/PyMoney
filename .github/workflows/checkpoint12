import sys

class Record:

    def __init__(self, category, description, amount):
        self._category = category
        self._description = description
        self._amount = amount
    
    def __repr__(self):
        return f"Record({self._category}, {self._description}, {self._amount})"

    def display(self):
        return f"{self._category}, {self._description}, {self._amount}"
    
    @property
    def category(self):
        return self._category
    
    @property
    def description(self):
        return self._description
    
    @property
    def amount(self):
        return self._amount
    
class Categories:

    def __init__(self):
        self._categories = ['expense', ['food', ['meal', 'snack', 'drink'], 'transportation', ['bus', 'railway']], 'income', ['salary', 'bonus']]

    def view(self):
        def view_categories(lst = self._categories, loop = 0):
            for i in range(len(lst)):
                if not isinstance(lst[i], list):
                    print(" " * 2 * loop + "- " + f"{lst[i]}")
                else:
                    view_categories(lst[i], loop+1)

        view_categories()

    def is_category_valid(self, cat):
        def is_category_valid_helper(cat, lst):
            for i in range(len(lst)):
                if not isinstance(lst[i], list):
                    if (cat == lst[i]):
                        return True
                else:
                    if is_category_valid_helper(cat, lst[i]):
                        return True
            return False
        
        return is_category_valid_helper(cat, self._categories)

    def find_subcategories(self):
        def find_subcategories_gen(category, categories, found=False):
            if isinstance(categories, list):
                for index, child in enumerate(categories):
                    yield from find_subcategories_gen(category, child, found)
                    if child == category and index + 1 < len(categories) and isinstance(categories[index + 1], list):
                        yield from find_subcategories_gen(category, categories[index + 1], True)
            else:
                if categories == category or found:
                    yield categories

class Records:

    def __init__(self):
        self._records = []
        self._init_balance = 0

        try:
            Records.read_and_write(self)
        except FileNotFoundError:
            with open("records.txt", "w") as fh:
                pass
        Records.read_and_write(self)

    def read_and_write(self):
        try:
            with open('records.txt', 'r') as fh:
                self._init_balance = int(fh.readline().strip())
                for line in fh:
                    cat, desc, amt = line.strip().split()
                    self._records.append((cat, desc, int(amt)))
        except ValueError:
            try:
                self._init_balance =  int(input("How much money do you have?"))
                with open("records.txt", "w") as fh:
                    fh.write(f"{self._init_balance}\n")
            except ValueError:
                print("Invalid value for money. Set to 0 by default.")
                self._init_balance = 0
                with open("records.txt", "w") as fh:
                    fh.write(f"{self._init_balance}\n")

        return self._init_balance, self._records
    
    def save_data(self):
        with open("records.txt", "w") as fh:
            fh.write(str(self._init_balance) + '\n')
            for cat, desc, amt in self._records:
                fh.write(f"{cat} {desc} {amt}\n")
        return self._records
    
    def add(self):
        spend = input("Add an expense or income record with description and amount(srperate by spaces):\ncat1 desc1 amt1,cat2 desc2 amt2,cat3 desc3 amt3, ...\n")
        try:
            input_lst = spend.split(",")
            n = len(input_lst)
            cat = []
            desc = []
            amt = []
            for i in range(n):
                index = input_lst[i].split()
                cat.append(index[0])
                desc.append(index[1])
                amt.append(index[2])
            try:
                for i in range(n):
                    if (categories.is_category_valid(cat[i]) == False):
                        print('The specified category is not in the category list.\nYou can check the category list by command \"view categories\".\nFail to add a record.\n')
                    else:
                        self._records.append((cat[i], desc[i], int(amt[i])))
            except (IndexError, ValueError):
                print('Invalid value for money.\nFail to add a record.')
        except ValueError:
            print('The format of a record should be like this: categories description amount.\nFail to add a record.')
        return self._records
    
    def view(self):
        print('Category        Descriptions         Amount')
        print('--------------- -------------------- --------')
        balance = self._init_balance
        try:
            for cat, desc, amt in self._records:
                balance += amt
                print(f'{cat.ljust(16)}{desc.ljust(20)} ${amt}')
        except:
            pass
        finally:
            print('--------------- -------------------- --------')
            print(f'Now you have {balance} dollars.')
    
    def delete(self):
        omit = input('Which description and amount you what to delete\n')
        try:
            omit_cat, omit_desc, omit_amt = omit.split()
            omit_amt = int(omit_amt)
            if (omit_cat, omit_desc, omit_amt) not in self._records:
                print(f"There's no record with {omit_cat} {omit_desc} {omit_amt}. Fail to delete a record.")
            else:
                try:
                    self._records.remove((omit_cat, omit_desc, int(omit_amt)))
                except ValueError:
                    print('Invalid format. Fail to delete a record.')
        except ValueError:
            print('Invalid format. Fail to delete a record.')
        return self._records
    
    def find(self):
        subcategories = categories.find_subcategories(target, categories._categories)
        filtered_records = filter(lambda x: x[0] in subcategories, self._records)
        #for every x in records, looks it if it is in the subcategories.
        print('Category        Description          Amount')
        print('=============== ==================== ======')
        total_amount = 0
        for record in filtered_records:
            total_amount += record[2]
            print(f'{record[0].ljust(16)}{record[1].ljust(20)} ${record[2]}')
        print('=============== ==================== ======')
        print(f'The total amount above is {total_amount}.')

categories = Categories()
records = Records()

while True:
    command = input('\nWhat do you want to do (add / view / delete / view_categories / find / exit)?\n') 
    if command == 'add':
        records.add()
    elif command == 'view':
        records.view()
    elif command == 'delete':
        records.delete()
    elif command == 'view_categories':
        categories.view()
    elif command == 'find':
        target = input('Which category do you want to find?')
        target_categories = categories.find_subcategories(target, categories._categories)
        records.find(target_categories)
    elif command == 'exit':
        records.save_data()
        break
    else:
        sys.stderr.write('Invalid command. Try again.\n')
